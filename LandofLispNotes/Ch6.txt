This Chapter, we'll focus on the most baisc of all user interfaces, the command-line interface.

Printing to the Screen
  the print function simply lets you print stuff to the console
  the print function causes each item to be printed on a separate line.
  but prin1 does not put the printed items on separate lines. To be precise, the print and pin1 commands are the same in every way, except that print will start a new line before printing a value.
  When you need to print something on the screen, you should first think of the print command. If you need to read something in,you should first think of the read command.
  Whenever you have an input or output task in Lisp, you should ask yourself, "can print or read do the job?" You will save yourself a lot of trouble if you always use these two functions as your starting point.
  Almost any conceivable type of data in Lisp can be printed and read using these commands, without the slightest bit of loss along the way.

Take a look at print
  (print '3) => 3 An integer
  (print '3.4) => 3.4 A float
  (print 'foo) => FOO A symbol. It may printed in all caps, since CL symbols are bilind to letter case.
  (print '"foo") => "foo" A string
  (print '#\a) => #\a A character
  print pretty much just prints out exactly what we put in.
  Note that we put an explicit quote on the front of each value. It could be omitted and would e implicit in all cases but the symbol name, since a symbol can also refer to functions.
  To create a Lisp character, just place the #\symbols  in front of the actual character. Lisp also has special literals defined for nonbisible characters. The most important for everyday use are #\newline, #\tab, and #\space
  A table of output from the read function would look just as brting as this table for print, in the same symmetrical way.

Hint
  Lisp symbols are blind to letter case. While this is true for most strings, it is in fact possible to create case-sensitive symbols by surrounding the symbol with the vertical pipe |. So the symbol |CaseSensitiveSymbol| will retain its case. Symbols surrounded by vertical pipes can even contain punctuation. Hence |even this is a legal Lisp symbol!|

Reading and Printing Stuff the Way Humans like it
                  printing stuff    reading stuff
 for computers      print              read
 for humans         princ              ???

   The princ function can take any piece of Lisp data, and it tries to print that data in a wat humans would prefer.It will do the basic things you might expect: leave off the quotes on a string, print characters in their raw form, and so on.
   The cool thing about hte print command is that it prints objects in such a way that they can alwats be "read" back into their internal representation. However, this meas print can't be used to generate any arbitrary bit of text.
   princ is a one-way street
   The function that does read a line called read-line(cin.getline)

 The symmetry between code and data in Lisp
   It can treat program code and data interchangeably. A programming language that uses the same data structures to store data and program code is called homoiconic.
   We used the quote to change beween the two modes
   eval function
   (eval '(+ 2 3)) => 5
   Quoting, quasiquoting, the eval command, and macros allow you to take advantage of homoiconicity in your code.


 Adding a Custom interface to our game engine

   (defun game-reol ()
     (loop (print (eval (read)))))
   (game-repl)
   (look)
   ...responce...

   First it read a command, then evals it.(In CL, you'll need to hit CTRL-C and type :a to get out of the infinite loop)



Writing a custom read funciton
	  The purpose of our game-read function is to fix the two annoyances that make the standard Lisp read funciton wrong for playing our game:
	  	1.The standard Lisp read foece us to put parantheses aruond our commnads. TO accomplish this, we can just call 
	  	read-line and stick in our own parantheses.
	  	2. With read, we must put a quote infront of any function commands. We should be about to type walk east without a quote in front of east. To do this, we'll stick a quote in front of the parameters after the fact.
   		(hint: the type returned of read-line is a string, but read's is a symbol)

   		The read-from-string command work just like the read comand, but lets us read a syntax expression (or any other basic Lisp datatype) from a string instead of directly from the console.(the type returned is a symbol)

   		concatenate: be used for concatenating strings together
   		(apply #'concatenate 'string '("aaa" "bbb" "ccc"))	

   		Then he define a local function called quote-it, which we can use to auote any arguments the player has in a command. 
   		The single quote is just short hand for a lisp command called quote. This means that 'foo and (quote foo) are the same.
   		Remember thhat local functions can be defined with labels or flet.

   		(something: this game-read funciton couuldn't handle the input such as "(look")


Writing a game-eval function
	To help protect our program from jhackers, we'll create a game-eval function taht allows only certain commands to be called.

	(something: this funciton doesn't offer 100% protection against hacking.)


Writing a game-print function
	the basic thinking of this funciton is change to output to a list, then handle character one by one with two bool variables which one is used to judge if it is a begin of a sentence and the other is to judge if it is in a ""(string)

	another point is the function coerce
	(coerce object result-type) => result
	Coerces the object to type result-type.
	if object is already of type result-type, the object itself is returned, regardless of whether it would have been possible in general to coerce an object of some other type to result-type.

	string-trim:
	(string-trim character-bag string) => trimmed-string
	string-trim returns a substring of string, witl all characters stripped off the beginning and end. string-left-trim is similar but strps characters off only the beginning; string-right-trim strips off only the end. none side effects.
   

The Dangers of read and eval
	These comands are very powerful, but also very dangerous.
	for example, these exists a function called format-harddrive but we don't want to any person have access to.
	First, you can do this way walk (format-harddrive)
	Another attack method that will break our grogram is to use reader macros.
	Such as walk #.(format-harddrive)
	When writing production Lisp code, you shouldtry to avoid these two commands when possible.

	